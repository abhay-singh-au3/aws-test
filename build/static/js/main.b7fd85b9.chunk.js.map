{"version":3,"sources":["utils/getUrl.js","utils/axiosClient.js","components/VideoTable/VideoTable.js","App.js","reportWebVitals.js","index.js"],"names":["getUrl","console","log","process","window","location","origin","client","axios","create","baseURL","VideoTable","useState","loading","setLoading","data","setData","columns","title","dataIndex","key","render","text","href","date","moment","format","fetchVideoData","a","get","resp","message","error","useEffect","props","name","action","beforeUpload","file","isVideo","type","split","isLt50M","size","style","display","justifyContent","alignItems","maxCount","accept","onChange","info","status","fileList","success","icon","UploadOutlined","dataSource","rowKey","item","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"8UAAO,SAASA,IAGR,OAFJC,QAAQC,IAAI,6BAA8BC,cAE/BC,OAAOC,SAASC,OAAS,ICAxC,IAIeC,E,OAJAC,EAAMC,OAAO,CACxBC,QAASV,M,QCoGEW,EAhGI,WAEf,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAU,CACZ,CACIC,MAAO,IACPC,UAAW,KACXC,IAAK,MAET,CACIF,MAAO,MACPC,UAAW,MACXC,IAAK,MACLC,OAAQ,SAAAC,GAAI,OAAI,mBAAGC,KAAMD,EAAT,SAAgBA,MAEpC,CACIJ,MAAO,aACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAAAG,GAAI,OAAIC,IAAOD,GAAME,OAAO,yBAItCC,EAAc,uCAAG,4BAAAC,EAAA,6DACnBd,GAAW,GADQ,kBAGIP,EAAOsB,IAAI,UAHf,OAGTC,EAHS,OAIfd,EAAQc,EAAKf,MAJE,gDAMfgB,IAAQC,MAAM,6CANC,QAQnBlB,GAAW,GARQ,yDAAH,qDAWpBmB,qBAAU,WACNN,MACD,IAEH,IAAMO,EAAQ,CACVC,KAAM,OACNC,OAAO,GAAD,OAAKpC,IAAL,iBACNqC,aAHU,SAGGC,GACT,IAAMC,EAAsC,UAA5BD,EAAKE,KAAKC,MAAM,KAAK,GAChCF,GACDR,IAAQC,MAAM,mCAElB,IAAMU,EAAUJ,EAAKK,KAAO,KAAO,KAAO,GAI1C,OAHKD,GACDX,IAAQC,MAAM,iCAEXO,GAAWG,IAkB1B,OACI,eAAC,IAAD,WACI,qBAAKE,MAAO,CACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAHhB,SAKA,cAAC,IAAD,yBACIC,SAAU,EACVC,OAAO,UACPC,SAxBe,SAACC,GACxBrC,GAAW,GACc,cAArBqC,EAAKb,KAAKc,QACVnD,QAAQC,IAAIiD,EAAKb,KAAMa,EAAKE,UAEP,SAArBF,EAAKb,KAAKc,QACVrB,IAAQuB,QAAR,UAAmBH,EAAKb,KAAKH,KAA7B,gCACAR,KAC4B,UAArBwB,EAAKb,KAAKc,QACjBrB,IAAQC,MAAR,UAAiBmB,EAAKb,KAAKH,KAA3B,yBAEJrB,GAAW,KAcCoB,GAJR,aAMI,cAAC,IAAD,CAAQqB,KAAM,cAACC,EAAA,EAAD,IAAd,kCAGJ,cAAC,IAAD,CACI3C,QAASA,EACT4C,WAAY1C,EACZE,QAASA,EACTyC,OAAQ,SAAAC,GAAI,OAAIA,EAAKC,UCxFtBC,MANf,WACE,OACI,cAAC,EAAD,KCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASlD,OACP,cAAC,IAAMmD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b7fd85b9.chunk.js","sourcesContent":["export function getUrl() {\n    console.log('endpoint_differenciate => ', process.env.NODE_ENV);\n    if (process.env.NODE_ENV === 'production') {\n        return window.location.origin + '/';\n    } else {\n        return process.env.REACT_APP_API_URL + '/'\n    }\n}","import axios from 'axios';\nimport { getUrl } from './getUrl';\n\nconst client = axios.create({\n    baseURL: getUrl(),\n});\n\nexport default client;","import React, { useEffect, useState } from 'react';\nimport { message, Table, Card, Upload, Button } from 'antd';\nimport moment from 'moment';\nimport { UploadOutlined } from '@ant-design/icons';\n\nimport client from '../../utils/axiosClient';\nimport { getUrl } from '../../utils/getUrl';\n\nconst VideoTable = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n\n    const columns = [\n        {\n            title: '#',\n            dataIndex: 'id',\n            key: 'id'\n        },\n        {\n            title: 'URL',\n            dataIndex: 'url',\n            key: 'url',\n            render: text => <a href={text}>{text}</a>\n        },\n        {\n            title: 'Created on',\n            dataIndex: 'createdAt',\n            key: 'createdAt',\n            render: date => moment(date).format('DD-MM-YYYY hh:mm a')\n        }\n    ]\n\n    const fetchVideoData = async () => {\n        setLoading(true)\n        try {\n            const resp = await client.get('videos');\n            setData(resp.data)\n        } catch (error) {\n            message.error('Something went wrong while fetching data!')\n        }\n        setLoading(false)\n    }\n\n    useEffect(() => {\n        fetchVideoData()\n    }, [])\n\n    const props = {\n        name: 'file',\n        action: `${getUrl()}videos/upload`,\n        beforeUpload(file) {\n            const isVideo = file.type.split('/')[0] === 'video';\n            if (!isVideo) {\n                message.error('You can only upload video file!');\n            }\n            const isLt50M = file.size / 1024 / 1024 < 50;\n            if (!isLt50M) {\n                message.error('Video must smaller than 50MB!');\n            }\n            return isVideo && isLt50M;\n        }\n    }\n\n    const handleUploadChange = (info) => {\n        setLoading(true)\n        if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n        }\n        if (info.file.status === 'done') {\n            message.success(`${info.file.name} file uploaded successfully`);\n            fetchVideoData()\n        } else if (info.file.status === 'error') {\n            message.error(`${info.file.name} file upload failed.`);\n        }\n        setLoading(false)\n    }\n\n    return (\n        <Card>\n            <div style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }}>\n            <Upload\n                maxCount={1}\n                accept=\"video/*\"\n                onChange={handleUploadChange}\n                {...props}\n            >\n                <Button icon={<UploadOutlined />}>Click to Upload</Button>\n            </Upload>\n            </div>\n            <Table\n                loading={loading}\n                dataSource={data}\n                columns={columns}\n                rowKey={item => item.id}\n            />\n        </Card>\n    )\n}\n\nexport default VideoTable;","import './App.css';\n\nimport VideoTable from './components/VideoTable/VideoTable';\n\nfunction App() {\n  return (\n      <VideoTable />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}